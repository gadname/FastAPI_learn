# Multi-stage build for FastAPI application optimization
# Stage 1: Build stage
FROM python:3.12-slim as builder

# Install system dependencies needed for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install --no-cache-dir poetry==1.8.3

# Set Poetry configuration
RUN poetry config virtualenvs.create false

# Set work directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml poetry.lock* ./

# Install only production dependencies
RUN poetry install --no-dev --no-interaction --no-root

# Stage 2: Runtime stage
FROM python:3.12-slim as runtime

# Environment variables for configuration externalization
ENV PYTHONPATH=/app \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FASTAPI_HOST=0.0.0.0 \
    FASTAPI_PORT=8000 \
    FASTAPI_RELOAD=false \
    FASTAPI_LOG_LEVEL=info

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create app directory and set ownership
RUN mkdir -p /app && chown -R appuser:appuser /app

# Set work directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=appuser:appuser . .

# Switch to non-root user
USER appuser

# Expose only the necessary port (configurable via environment variable)
EXPOSE ${FASTAPI_PORT:-8000}

# Health check using Python instead of curl
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:${FASTAPI_PORT:-8000}/health')" || exit 1

# Command to run the application (using environment variables)
CMD uvicorn app.main:app \
    --host ${FASTAPI_HOST} \
    --port ${FASTAPI_PORT} \
    --reload ${FASTAPI_RELOAD} \
    --log-level ${FASTAPI_LOG_LEVEL}